<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/highcharts-3d.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.1/axios.min.js"></script>

<style>
.container {
  width: 617px;
}
</style>

<div id="container" style="height: 400px"></div>
<button class="new-data">Fetch New Data</button>

<script>
const renderChart = (data) => {
  var chart = new Highcharts.Chart({
    chart: {
      renderTo: 'container',
      margin: 100,
      type: 'scatter',
      options3d: {
          enabled: true,
          alpha: 10,
          beta: 30,
          depth: 250,
          viewDistance: 5,
          fitToPlot: false,
        }
      },
      title: {
        text: 'Randomly Generated Universe'
      },
      subtitle: {
        text: 'For your visual pleasure :P'
      },
      plotOptions: {
        scatter: {
          width: 10,
          height: 10,
          depth: 10
        }
      },
      yAxis: {
        min: 0,
        max: 10,
        title: null
      },
      xAxis: {
        min: 0,
        max: 10,
        gridLineWidth: 1
      },
      zAxis: {
        min: 0,
        max: 10,
        showFirstLabel: false
      },
      legend: {
        enabled: true
      },
      series: [
        {
          name: 'Positive Charge Atom',
          colorByPoint: false,
          data: data.universe.filter(atom => atom.charge === 1).map((atom) => {
            const { x, y, z } = atom
            return [x, y, z]
          })
        },
        {
          name: 'Neutral Charge Atom',
          colorByPoint: false,
          data: data.universe.filter(atom => atom.charge === 0).map((atom) => {
            const { x, y, z } = atom
            return [x, y, z]
          })
        },
        {
          name: 'Negative Charge Atom',
          colorByPoint: false,
          data: data.universe.filter(atom => atom.charge === -1).map((atom) => {
            const { x, y, z } = atom
            return [x, y, z]
          })
        }
      ],
    }
  );
}

const featchAndRender = () => {
  axios.get('/api/v1/small')
    .then((res) => {
      renderChart(res.data)
    })
    .catch((err) => {
      throw new Error(err)
    })
}

featchAndRender()

document.querySelector('.new-data').addEventListener('click', (e) => {
  featchAndRender()
})
</script>
